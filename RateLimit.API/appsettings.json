{
  "IpRateLimitPolicies": { //kapsamı daha dar olan kural gecerli olur. perioda bakılrı aynı ise limite bakar hangisi daha düşük ise o ezer!!
    "IPRules": [
      {
        "Ip": "::1",
        "Rules": [
          {
            "Endpoint": "*", //tüm endpointler için * konulur
            "Period": "30s", //s :saniye, m:dakika, g:gün
            "Limit": 30 //5 saniyede 2 request
          }
        ]
      }
    ]

  },
  "IpRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"mesaj\":\" istek limiti aşıldı.\", \" Detay \" : \" İzin verilen istek sayısı {1} 'de {0} istektir. {2} saniye sonra tekrar deneyiniz.\"}}",
      "ContentType": "application/json"
    }, //Kota aşıldığında mesajı customize etmek için kullanıcaz.Burada key value olarak kullanarak yazdık. {1}: period {0} limite karşılık gelir. {2} kaç saniye sonra istek yapılabilecegi anlamına gelir
    "EnableEndpointRateLimiting": true, //Endpoint üzerinden sınırlama sağlayabiliriz.
    "RealIpHeader": "x-real-ip", //load balaancerdan ip hangi key ile geliyorsa onu yakalamak için, örnek olarak x-real-ip keyi yazdık
    "StackBlockedRequests": false, //Bir endpointe dakikada 60 tane request yapılabilir saatte de toplamda 100 req yapılabilir dedik.geriye kalan 40 req yaparsa sayılsın mı sayılmasın mı. Sayılmasın için true, başarısızların sayılması için false dedik.
    "HttpStatusCode": 429, //Başarısız olanlar için statu ne dönelim, 429 zaten toomanyreq demek.Bu bize dönen api varsa orada ratelimit var demektir.
    "IpWhitelist": [ "127.0.0.1" ], // izin vereceğimiz ip değerleri
    "EndpointWhiteList": [ "put:/api/product" ], //buraya böyle bir istek yapılacaksa muaf tut . Birden fazla gelirse eger virgül ile ayırarak yazbailiriz.
    "GeneralRules": [
      {
        "Endpoint": "*:/api/product", //tüm endpointler için * konulur
        "Period": "20s", //s :saniye, m:dakika, g:gün
        "Limit": 2 //5 saniyede 2 request
      },
      //{
      //  "Endpoint": "*:/api/product",
      //  "Period": "1h",
      //  "Limit": 100
      //},
      {
        "Endpoint": "*:/api/product/*", //parametre alan ifadede buradaki çalışır
        "Period": "30s", //s :saniye, m:dakika, g:gün
        "Limit": 5 //5 saniyede 2 request
      },
      {
        "Endpoint": "*:/api/category", // devamında /action adı belirterek actionı da limitleyebilriz.
        "Period": "30s",
        "Limit": 5
      },
      {
        "Endpoint": "*:/api/category",
        "Period": "1d",
        "Limit": 500 // Her metot tipine göre ayrı ayrı tutulur. Birinde azalması diğerini etkilemez
      }
    ]
  },
  "ClientRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"mesaj\":\" istek limiti aşıldı.\", \" Detay \" : \" İzin verilen istek sayısı {1} 'de {0} istektir. {2} saniye sonra tekrar deneyiniz.\"}}",
      "ContentType": "application/json"
    }, //Kota aşıldığında mesajı customize etmek için kullanıcaz.Burada key value olarak kullanarak yazdık. {1}: period {0} limite karşılık gelir. {2} kaç saniye sonra istek yapılabilecegi anlamına gelir
    "EnableEndpointRateLimiting": true, //Endpoint üzerinden sınırlama sağlayabiliriz.
    "RealIpHeader": "x-real-ip", //load balaancerdan ip hangi key ile geliyorsa onu yakalamak için, örnek olarak x-real-ip keyi yazdık
    "StackBlockedRequests": false, //Bir endpointe dakikada 60 tane request yapılabilir saatte de toplamda 100 req yapılabilir dedik.geriye kalan 40 req yaparsa sayılsın mı sayılmasın mı. Sayılmasın için true, başarısızların sayılması için false dedik.
    "HttpStatusCode": 429, //Başarısız olanlar için statu ne dönelim, 429 zaten toomanyreq demek.Bu bize dönen api varsa orada ratelimit var demektir.
    "ClientIdHeader": "X-ClientId", //postmande request headerına yazacagımız key degeri
    "ClientWhitelist": [ "client-1" ], //postmande request headerına yazacagımız value degeri
    "EndpointWhiteList": [ "put:/api/product" ], //buraya böyle bir istek yapılacaksa muaf tut . Birden fazla gelirse eger virgül ile ayırarak yazbailiriz.
    "GeneralRules": [
      {
        "Endpoint": "*:/api/product", //tüm endpointler için * konulur
        "Period": "20s", //s :saniye, m:dakika, g:gün
        "Limit": 2 //5 saniyede 2 request
      },
      //{
      //  "Endpoint": "*:/api/product",
      //  "Period": "1h",
      //  "Limit": 100
      //},
      {
        "Endpoint": "*:/api/product/*", //parametre alan ifadede buradaki çalışır
        "Period": "30s", //s :saniye, m:dakika, g:gün
        "Limit": 5 //5 saniyede 2 request
      },
      {
        "Endpoint": "*:/api/category", // devamında /action adı belirterek actionı da limitleyebilriz.
        "Period": "30s",
        "Limit": 5
      },
      {
        "Endpoint": "*:/api/category",
        "Period": "1d",
        "Limit": 500 // Her metot tipine göre ayrı ayrı tutulur. Birinde azalması diğerini etkilemez
      }
    ]
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
